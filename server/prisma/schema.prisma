// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file: database/cms.db"
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String
  password  String
  email     String   @unique
  contact   String   @unique
  createdAt DateTime @default(now())
  role      String   @default("USER")
  User      User?
  Admin     Admin?
}

model Complaint {
  id          Int        @id @default(autoincrement())
  title       String     @unique
  description String?
  status      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  upvotedBy   User[]     @relation(name: "UpvotesOnComplaints")
  user        User       @relation(name: "RegisteredComplaints", fields: [userId], references: [id])
  userId      Int
  Work        Work?
  Validated   Validated?
}

model User {
  id                Int         @id @default(autoincrement())
  profile           Profile?    @relation(fields: [profileId], references: [id])
  profileId         Int         @unique
  department        String
  rollNo            String      @unique
  Complaint         Complaint[] @relation(name: "RegisteredComplaints")
  upvotedComplaints Complaint[] @relation(name: "UpvotesOnComplaints")
  Reviewer          Reviewer?
}

model Admin {
  id          Int         @id @default(autoincrement())
  designation String?
  profile     Profile?    @relation(fields: [profileId], references: [id])
  profileId   Int         @unique
  assigned    Validated[]
  Work        Work[]
}

model Reviewer {
  id        Int         @id @default(autoincrement())
  user      User?       @relation(fields: [userId], references: [id])
  userId    Int         @unique
  Validated Validated[]
}

model Work {
  id            Int       @id @default(autoincrement())
  admin         Admin     @relation(fields: [adminId], references: [id])
  adminId       Int
  complaint     Complaint @relation(fields: [complaintId], references: [id])
  complaintId   Int       @unique
  workerName    String
  workerContact String
  report        String?
  status        String
  assignedDate  DateTime? @updatedAt
}

model Validated {
  id          Int       @id @default(autoincrement())
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId Int       @unique
  reviewer    Reviewer  @relation(fields: [reviewerId], references: [id])
  reviewerId  Int
  Admin       Admin?    @relation(fields: [assignedTo], references: [id])
  assignedTo  Int?
  remarks     String
  status      String
  validatedAt DateTime? @updatedAt
}
