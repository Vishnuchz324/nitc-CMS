// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file: database/cms.db"
}

model Tag {
  id         Int               @id @default(autoincrement())
  title      String            @unique
  complaints TagsOnComplaint[]
}

model Profile {
  id        Int       @id @default(autoincrement())
  name      String
  password  String
  email     String    @unique
  contact   String    @unique
  createdAt DateTime  @default(now())
  role      String    @default("USER")
  User      User?
  Admin     Admin?
  Reviewer  Reviewer?
}

model Complaint {
  id          Int               @id @default(autoincrement())
  title       String            @unique
  description String?
  tags        TagsOnComplaint[]
  status      String
  numVotes    Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?         @updatedAt
  user        User              @relation(fields: [userId], references: [id])
  userId      Int

  Work      Work[]
  Validated Validated[]
}

model TagsOnComplaint {
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId Int
  tag         Tag       @relation(fields: [tagId], references: [id])
  tagId       Int

  @@id([complaintId, tagId])
}

model User {
  id         Int         @id @default(autoincrement())
  profile    Profile?    @relation(fields: [profileId], references: [id])
  profileId  Int         @unique
  department String
  rollNo     String      @unique
  Complaint  Complaint[]
}

model Admin {
  id          Int        @id @default(autoincrement())
  designation String?
  profile     Profile?   @relation(fields: [profileId], references: [id])
  profileId   Int        @unique
  Work        Work[]
  Validated   Validated? @relation(fields: [validatedId], references: [id])
  validatedId Int?
}

model Reviewer {
  id        Int         @id @default(autoincrement())
  profile   Profile?    @relation(fields: [profileId], references: [id])
  profileId Int         @unique
  rollNo    String      @unique
  Validated Validated[]
}

model Work {
  id           Int       @id @default(autoincrement())
  admin        Admin     @relation(fields: [adminId], references: [id])
  adminId      Int
  complaint    Complaint @relation(fields: [complaintId], references: [id])
  complaintId  Int
  workerName   String
  report       String?
  status       String
  assignedDate DateTime? @updatedAt
}

model Validated {
  id          Int       @id @default(autoincrement())
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId Int
  reviewer    Reviewer  @relation(fields: [reviewerId], references: [id])
  reviewerId  Int
  asdignedTo  Admin[]
  status      String
  validatedAt DateTime? @updatedAt
}
